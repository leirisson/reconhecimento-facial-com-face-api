// // retorna uma processa de listar as webcam do computador

// async function CapturarCamerasDoPc() {
//   // essa fun√ß√£o vai retorna um array com as cameras, audios, de um camputador
//   // exemplo: [camer1, camera2,etc...]
//   navigator.mediaDevices.enumerateDevices().then((todosOsdispositivos) => {
//     console.log({todosOsdispositivos})
//     if (Array.isArray(todosOsdispositivos)) {
//       todosOsdispositivos.forEach((dispositivos) => {
//         if (dispositivos.kind === "videoinput") {
//             console.log(dispositivos)
//             navigator.med
//         }
//       });
//     }
//   });
// }

// CapturarCamerasDoPc();

// ============================================
// PARTE 1: VARI√ÅVEIS GLOBAIS E ELEMENTOS DOM
// ============================================

// Elementos HTML
const video = document.getElementById("video");
const startBtn = document.getElementById("startBtn");
const stopBtn = document.getElementById("stopBtn");
const status = document.getElementById("status");

// Vari√°veis de controle
let stream = null;

// ============================================
// PARTE: INICIAR C√ÇMERA (getUserMedia)
// ============================================

// Fun√ß√£o para INICIAR a c√¢mera
async function startCamera() {
  try {
    status.textContent = "‚è≥ Aguarde, acessando c√¢mera...";

    // Solicita acesso √† webcam
    stream = await navigator.mediaDevices.getUserMedia({
      video: {
        width: { ideal: 1280 },
        height: { ideal: 720 },
      },
      audio: false,
    });

    // Conecta o stream ao elemento <video>
    video.srcObject = stream;

    // Mostra o v√≠deo
    video.classList.add("active");

    // Atualiza interface
    status.textContent = "‚úÖ C√¢mera ativa!";
    startBtn.style.display = "none";
    stopBtn.style.display = "inline-block";

    console.log("‚úÖ C√¢mera iniciada com sucesso!");
  } catch (error) {
    console.error("‚ùå Erro:", error);
    status.textContent = "‚ùå Erro ao acessar a c√¢mera!";

    alert(
      "N√£o foi poss√≠vel acessar a c√¢mera!\n\n" +
        "Verifique se:\n" +
        "‚úì Voc√™ permitiu o acesso √† c√¢mera\n" +
        "‚úì A c√¢mera n√£o est√° sendo usada por outro programa\n" +
        "‚úì Est√° usando HTTPS ou localhost"
    );
  }
}

// Fun√ß√£o para PARAR a c√¢mera
function stopCamera() {
  if (stream) {
    // Para todas as tracks (v√≠deo)
    stream.getTracks().forEach((track) => track.stop());

    // Remove o stream do v√≠deo
    video.srcObject = null;

    // Esconde o v√≠deo
    video.classList.remove("active");

    // Atualiza interface
    status.textContent = "‚èπÔ∏è C√¢mera parada";
    startBtn.style.display = "inline-block";
    stopBtn.style.display = "none";

    stream = null;
    console.log("üì∑ C√¢mera parada");
  }
}

// Event Listeners (cliques nos bot√µes)
startBtn.addEventListener("click", startCamera);
stopBtn.addEventListener("click", stopCamera);
